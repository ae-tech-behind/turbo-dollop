// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eiizu/go-service/controller (interfaces: BooksUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/eiizu/go-service/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBooksUseCase is a mock of BooksUseCase interface
type MockBooksUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBooksUseCaseMockRecorder
}

// MockBooksUseCaseMockRecorder is the mock recorder for MockBooksUseCase
type MockBooksUseCaseMockRecorder struct {
	mock *MockBooksUseCase
}

// NewMockBooksUseCase creates a new mock instance
func NewMockBooksUseCase(ctrl *gomock.Controller) *MockBooksUseCase {
	mock := &MockBooksUseCase{ctrl: ctrl}
	mock.recorder = &MockBooksUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBooksUseCase) EXPECT() *MockBooksUseCaseMockRecorder {
	return m.recorder
}

// CreateBook mocks base method
func (m *MockBooksUseCase) CreateBook(arg0 entity.Book) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook
func (mr *MockBooksUseCaseMockRecorder) CreateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBooksUseCase)(nil).CreateBook), arg0)
}

// DeleteBook mocks base method
func (m *MockBooksUseCase) DeleteBook(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBooksUseCaseMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBooksUseCase)(nil).DeleteBook), arg0)
}

// GetBook mocks base method
func (m *MockBooksUseCase) GetBook(arg0 string) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBooksUseCaseMockRecorder) GetBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBooksUseCase)(nil).GetBook), arg0)
}

// GetBooks mocks base method
func (m *MockBooksUseCase) GetBooks() ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks
func (mr *MockBooksUseCaseMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBooksUseCase)(nil).GetBooks))
}

// UpdateBook mocks base method
func (m *MockBooksUseCase) UpdateBook(arg0 string, arg1 entity.Book) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockBooksUseCaseMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBooksUseCase)(nil).UpdateBook), arg0, arg1)
}
